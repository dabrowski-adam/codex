name: Continuous Deployment

permissions:
  contents: write

on:
  push:
    branches:
    - main

jobs:

  release:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.release.outputs.release }}
    steps:
      - uses: actions/checkout@v4
      - uses: coursier/cache-action@v6.4
      - uses: VirtusLab/scala-cli-setup@v1.5
        with:
          scala-cli-version: 1.5.0
          jvm: 'graalvm-java21:21.0.2'
      - id: release
        name: Release?
        run: |
          tag=$(scala-cli .github/scripts/tag.sc)
          if [ "$tag" = 'major' -o "$tag" = 'minor' -o "$tag" = 'patch' ]; then
            version=$(scala-cli .github/scripts/version.sc)
            echo "release=$version" >> "$GITHUB_OUTPUT"
          else
            echo "release=" >> "$GITHUB_OUTPUT"
          fi

  build:
    runs-on: ${{ matrix.os }}
    needs: release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact: codex-linux
          - os: macOS-latest
            artifact: codex-mac
          - os: windows-latest
            artifact: codex-windows.exe
    steps:
      - uses: actions/checkout@v4
      - uses: coursier/cache-action@v6.4
      - uses: VirtusLab/scala-cli-setup@v1.5
        with:
          scala-cli-version: 1.5.0
          jvm: 'graalvm-java21:21.0.2'
          power: true
      - name: Test
        run: scala-cli test .
      - name: Package
        if: ${{ needs.release.outputs.release != '' }}
        run: scala-cli .github/scripts/package.sc
      - uses: actions/upload-artifact@v4
        if: ${{ needs.release.outputs.release != '' }}
        with:
          name: ${{ matrix.artifact }}
          path: artifacts/${{ matrix.artifact }}

  deploy:
    runs-on: ubuntu-latest
    needs: [release, build]
    if: ${{ needs.release.outputs.release != '' }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: codex-linux
          path: ./
      - uses: actions/download-artifact@v4
        with:
          name: codex-mac
          path: ./
      - uses: actions/download-artifact@v4
        with:
          name: codex-windows.exe
          path: ./
      - name: Publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.release.outputs.release }}
        run: |
          gh release create "$TAG" \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} $TAG" \
              --generate-notes \
              codex-linux codex-mac codex-windows.exe
